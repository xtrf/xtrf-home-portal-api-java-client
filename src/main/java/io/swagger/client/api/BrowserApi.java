/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ColumnDTO;
import io.swagger.client.model.FilterDTO;
import io.swagger.client.model.FilterPropertyDTO;
import io.swagger.client.model.LocalSettingsDTO;
import io.swagger.client.model.OrderDTO;
import io.swagger.client.model.PermissionsDTO;
import io.swagger.client.model.SettingsDTO;
import io.swagger.client.model.ViewDTO;
import io.swagger.client.model.ViewDetailsDTO;
import io.swagger.client.model.ViewWithIdDTO;
import io.swagger.client.model.ViewsBriefDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrowserApi {
    private ApiClient apiClient;

    public BrowserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrowserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for browseCSV
     * @param viewId view&#x27;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param additionalOrder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call browseCSVCall(Long viewId, String separator, String additionalOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (viewId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("viewId", viewId));
        if (separator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separator", separator));
        if (additionalOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalOrder", additionalOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call browseCSVValidateBeforeCall(Long viewId, String separator, String additionalOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = browseCSVCall(viewId, separator, additionalOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#x27;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param additionalOrder  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object browseCSV(Long viewId, String separator, String additionalOrder) throws ApiException {
        ApiResponse<Object> resp = browseCSVWithHttpInfo(viewId, separator, additionalOrder);
        return resp.getData();
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#x27;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param additionalOrder  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> browseCSVWithHttpInfo(Long viewId, String separator, String additionalOrder) throws ApiException {
        com.squareup.okhttp.Call call = browseCSVValidateBeforeCall(viewId, separator, additionalOrder, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form. (asynchronously)
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#x27;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param additionalOrder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseCSVAsync(Long viewId, String separator, String additionalOrder, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseCSVValidateBeforeCall(viewId, separator, additionalOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for browseJSON
     * @param viewId view&#x27;s identifier (optional)
     * @param page  (optional)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#x27;s default rows limit, supported values 10 to 1000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call browseJSONCall(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (viewId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("viewId", viewId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (additionalOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalOrder", additionalOrder));
        if (useDeferredColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useDeferredColumns", useDeferredColumns));
        if (maxRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxRows", maxRows));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call browseJSONValidateBeforeCall(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = browseJSONCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#x27;s identifier (optional)
     * @param page  (optional)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#x27;s default rows limit, supported values 10 to 1000 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object browseJSON(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows) throws ApiException {
        ApiResponse<Object> resp = browseJSONWithHttpInfo(viewId, page, additionalOrder, useDeferredColumns, maxRows);
        return resp.getData();
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#x27;s identifier (optional)
     * @param page  (optional)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#x27;s default rows limit, supported values 10 to 1000 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> browseJSONWithHttpInfo(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows) throws ApiException {
        com.squareup.okhttp.Call call = browseJSONValidateBeforeCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form. (asynchronously)
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#x27;s identifier (optional)
     * @param page  (optional)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#x27;s default rows limit, supported values 10 to 1000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call browseJSONAsync(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = browseJSONValidateBeforeCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for create
     * @param body Created view for given class. (required)
     * @param className view&#x27;s class name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCall(ViewDTO body, String className, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/for/{className}"
            .replaceAll("\\{" + "className" + "\\}", apiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createValidateBeforeCall(ViewDTO body, String className, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling create(Async)");
        }
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling create(Async)");
        }
        
        com.squareup.okhttp.Call call = createCall(body, className, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates view for given class.
     * Creates view for given class.
     * @param body Created view for given class. (required)
     * @param className view&#x27;s class name (required)
     * @return ViewWithIdDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewWithIdDTO create(ViewDTO body, String className) throws ApiException {
        ApiResponse<ViewWithIdDTO> resp = createWithHttpInfo(body, className);
        return resp.getData();
    }

    /**
     * Creates view for given class.
     * Creates view for given class.
     * @param body Created view for given class. (required)
     * @param className view&#x27;s class name (required)
     * @return ApiResponse&lt;ViewWithIdDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewWithIdDTO> createWithHttpInfo(ViewDTO body, String className) throws ApiException {
        com.squareup.okhttp.Call call = createValidateBeforeCall(body, className, null, null);
        Type localVarReturnType = new TypeToken<ViewWithIdDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates view for given class. (asynchronously)
     * Creates view for given class.
     * @param body Created view for given class. (required)
     * @param className view&#x27;s class name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(ViewDTO body, String className, final ApiCallback<ViewWithIdDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createValidateBeforeCall(body, className, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewWithIdDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for delete
     * @param viewId view&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling delete(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a view.
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(Long viewId) throws ApiException {
        deleteWithHttpInfo(viewId);
    }

    /**
     * Removes a view.
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(viewId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a view. (asynchronously)
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(Long viewId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(viewId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteColumn
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteColumnCall(Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteColumnValidateBeforeCall(Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deleteColumn(Async)");
        }
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling deleteColumn(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteColumnCall(viewId, columnName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a single column from view.
     * Deletes a single column from view.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ColumnDTO> deleteColumn(Long viewId, String columnName) throws ApiException {
        ApiResponse<List<ColumnDTO>> resp = deleteColumnWithHttpInfo(viewId, columnName);
        return resp.getData();
    }

    /**
     * Deletes a single column from view.
     * Deletes a single column from view.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ColumnDTO>> deleteColumnWithHttpInfo(Long viewId, String columnName) throws ApiException {
        com.squareup.okhttp.Call call = deleteColumnValidateBeforeCall(viewId, columnName, null, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a single column from view. (asynchronously)
     * Deletes a single column from view.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteColumnAsync(Long viewId, String columnName, final ApiCallback<List<ColumnDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteColumnValidateBeforeCall(viewId, columnName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for get
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling get(Async)");
        }
        
        com.squareup.okhttp.Call call = getCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all view&#x27;s information.
     * Returns all view&#x27;s information (ie. name, columns, filters, etc).
     * @param viewId view&#x27;s identifier (required)
     * @return ViewDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewDTO get(Long viewId) throws ApiException {
        ApiResponse<ViewDTO> resp = getWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns all view&#x27;s information.
     * Returns all view&#x27;s information (ie. name, columns, filters, etc).
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;ViewDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewDTO> getWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all view&#x27;s information. (asynchronously)
     * Returns all view&#x27;s information (ie. name, columns, filters, etc).
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAsync(Long viewId, final ApiCallback<ViewDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getColumnSettings
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColumnSettingsCall(Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}/settings"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getColumnSettingsValidateBeforeCall(Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getColumnSettings(Async)");
        }
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling getColumnSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getColumnSettingsCall(viewId, columnName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns column&#x27;s specific settings.
     * Returns column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getColumnSettings(Long viewId, String columnName) throws ApiException {
        ApiResponse<Object> resp = getColumnSettingsWithHttpInfo(viewId, columnName);
        return resp.getData();
    }

    /**
     * Returns column&#x27;s specific settings.
     * Returns column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getColumnSettingsWithHttpInfo(Long viewId, String columnName) throws ApiException {
        com.squareup.okhttp.Call call = getColumnSettingsValidateBeforeCall(viewId, columnName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns column&#x27;s specific settings. (asynchronously)
     * Returns column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColumnSettingsAsync(Long viewId, String columnName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColumnSettingsValidateBeforeCall(viewId, columnName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getColumns
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColumnsCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getColumnsValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getColumns(Async)");
        }
        
        com.squareup.okhttp.Call call = getColumnsCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns columns defined in view.
     * Returns columns defined in view.
     * @param viewId view&#x27;s identifier (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ColumnDTO> getColumns(Long viewId) throws ApiException {
        ApiResponse<List<ColumnDTO>> resp = getColumnsWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns columns defined in view.
     * Returns columns defined in view.
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ColumnDTO>> getColumnsWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getColumnsValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns columns defined in view. (asynchronously)
     * Returns columns defined in view.
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColumnsAsync(Long viewId, final ApiCallback<List<ColumnDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColumnsValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentViewDetails
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentViewDetailsCall(String className, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}"
            .replaceAll("\\{" + "className" + "\\}", apiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("placeName", placeName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentViewDetailsValidateBeforeCall(String className, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getCurrentViewDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getCurrentViewDetailsCall(className, placeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns current view&#x27;s detailed information, suitable for browser.
     * Returns current view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewDetailsDTO getCurrentViewDetails(String className, String placeName) throws ApiException {
        ApiResponse<ViewDetailsDTO> resp = getCurrentViewDetailsWithHttpInfo(className, placeName);
        return resp.getData();
    }

    /**
     * Returns current view&#x27;s detailed information, suitable for browser.
     * Returns current view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewDetailsDTO> getCurrentViewDetailsWithHttpInfo(String className, String placeName) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentViewDetailsValidateBeforeCall(className, placeName, null, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns current view&#x27;s detailed information, suitable for browser. (asynchronously)
     * Returns current view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentViewDetailsAsync(String className, String placeName, final ApiCallback<ViewDetailsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentViewDetailsValidateBeforeCall(className, placeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilter
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilterCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilterValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = getFilterCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s filter.
     * Returns view&#x27;s filter.
     * @param viewId view&#x27;s identifier (required)
     * @return FilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilterDTO getFilter(Long viewId) throws ApiException {
        ApiResponse<FilterDTO> resp = getFilterWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s filter.
     * Returns view&#x27;s filter.
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;FilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilterDTO> getFilterWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getFilterValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s filter. (asynchronously)
     * Returns view&#x27;s filter.
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilterAsync(Long viewId, final ApiCallback<FilterDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilterValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocalSettings
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocalSettingsCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings/local"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocalSettingsValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getLocalSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getLocalSettingsCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s local settings (for current user).
     * Returns view&#x27;s local settings (for current user).
     * @param viewId view&#x27;s identifier (required)
     * @return LocalSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocalSettingsDTO getLocalSettings(Long viewId) throws ApiException {
        ApiResponse<LocalSettingsDTO> resp = getLocalSettingsWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s local settings (for current user).
     * Returns view&#x27;s local settings (for current user).
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;LocalSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocalSettingsDTO> getLocalSettingsWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getLocalSettingsValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s local settings (for current user). (asynchronously)
     * Returns view&#x27;s local settings (for current user).
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocalSettingsAsync(Long viewId, final ApiCallback<LocalSettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocalSettingsValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrder
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/order"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrderCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s order settings.
     * Returns view&#x27;s order settings.
     * @param viewId view&#x27;s identifier (required)
     * @return OrderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDTO getOrder(Long viewId) throws ApiException {
        ApiResponse<OrderDTO> resp = getOrderWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s order settings.
     * Returns view&#x27;s order settings.
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;OrderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDTO> getOrderWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s order settings. (asynchronously)
     * Returns view&#x27;s order settings.
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(Long viewId, final ApiCallback<OrderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPermissions
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPermissionsCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/permissions"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPermissionsValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getPermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = getPermissionsCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s permissions.
     * Returns view&#x27;s permissions.
     * @param viewId view&#x27;s identifier (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionsDTO getPermissions(Long viewId) throws ApiException {
        ApiResponse<PermissionsDTO> resp = getPermissionsWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s permissions.
     * Returns view&#x27;s permissions.
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionsDTO> getPermissionsWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getPermissionsValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s permissions. (asynchronously)
     * Returns view&#x27;s permissions.
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPermissionsAsync(Long viewId, final ApiCallback<PermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPermissionsValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettings
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsValidateBeforeCall(Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getSettingsCall(viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s settings.
     * Returns view&#x27;s settings (ie. name).
     * @param viewId view&#x27;s identifier (required)
     * @return SettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsDTO getSettings(Long viewId) throws ApiException {
        ApiResponse<SettingsDTO> resp = getSettingsWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s settings.
     * Returns view&#x27;s settings (ie. name).
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;SettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsDTO> getSettingsWithHttpInfo(Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s settings. (asynchronously)
     * Returns view&#x27;s settings (ie. name).
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsAsync(Long viewId, final ApiCallback<SettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViewDetails
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewDetailsCall(String className, Long viewId, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}/{viewId}"
            .replaceAll("\\{" + "className" + "\\}", apiClient.escapeString(className.toString()))
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("placeName", placeName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViewDetailsValidateBeforeCall(String className, Long viewId, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getViewDetails(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getViewDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getViewDetailsCall(className, viewId, placeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns view&#x27;s detailed information, suitable for browser.
     * Returns view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewDetailsDTO getViewDetails(String className, Long viewId, String placeName) throws ApiException {
        ApiResponse<ViewDetailsDTO> resp = getViewDetailsWithHttpInfo(className, viewId, placeName);
        return resp.getData();
    }

    /**
     * Returns view&#x27;s detailed information, suitable for browser.
     * Returns view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewDetailsDTO> getViewDetailsWithHttpInfo(String className, Long viewId, String placeName) throws ApiException {
        com.squareup.okhttp.Call call = getViewDetailsValidateBeforeCall(className, viewId, placeName, null, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns view&#x27;s detailed information, suitable for browser. (asynchronously)
     * Returns view&#x27;s detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewDetailsAsync(String className, Long viewId, String placeName, final ApiCallback<ViewDetailsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewDetailsValidateBeforeCall(className, viewId, placeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViewsBrief
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewsBriefCall(String className, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/for/{className}"
            .replaceAll("\\{" + "className" + "\\}", apiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("placeName", placeName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViewsBriefValidateBeforeCall(String className, String placeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getViewsBrief(Async)");
        }
        
        com.squareup.okhttp.Call call = getViewsBriefCall(className, placeName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns views&#x27; brief.
     * Returns views&#x27; brief.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ViewsBriefDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewsBriefDTO getViewsBrief(String className, String placeName) throws ApiException {
        ApiResponse<ViewsBriefDTO> resp = getViewsBriefWithHttpInfo(className, placeName);
        return resp.getData();
    }

    /**
     * Returns views&#x27; brief.
     * Returns views&#x27; brief.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @return ApiResponse&lt;ViewsBriefDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewsBriefDTO> getViewsBriefWithHttpInfo(String className, String placeName) throws ApiException {
        com.squareup.okhttp.Call call = getViewsBriefValidateBeforeCall(className, placeName, null, null);
        Type localVarReturnType = new TypeToken<ViewsBriefDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns views&#x27; brief. (asynchronously)
     * Returns views&#x27; brief.
     * @param className views&#x27; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewsBriefAsync(String className, String placeName, final ApiCallback<ViewsBriefDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewsBriefValidateBeforeCall(className, placeName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewsBriefDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for selectViewAndGetItsDetails
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call selectViewAndGetItsDetailsCall(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}/{viewId}"
            .replaceAll("\\{" + "className" + "\\}", apiClient.escapeString(className.toString()))
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeNameDenotesSpecificPlaceInSystemWithTheTable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("place name (denotes specific place in system with the table)", placeNameDenotesSpecificPlaceInSystemWithTheTable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call selectViewAndGetItsDetailsValidateBeforeCall(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling selectViewAndGetItsDetails(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling selectViewAndGetItsDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = selectViewAndGetItsDetailsCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewDetailsDTO selectViewAndGetItsDetails(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable) throws ApiException {
        ApiResponse<ViewDetailsDTO> resp = selectViewAndGetItsDetailsWithHttpInfo(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable);
        return resp.getData();
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewDetailsDTO> selectViewAndGetItsDetailsWithHttpInfo(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable) throws ApiException {
        com.squareup.okhttp.Call call = selectViewAndGetItsDetailsValidateBeforeCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, null, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser. (asynchronously)
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#x27; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call selectViewAndGetItsDetailsAsync(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ApiCallback<ViewDetailsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = selectViewAndGetItsDetailsValidateBeforeCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for update
     * @param body Updated all view&#x27;s information. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCall(ViewDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateValidateBeforeCall(ViewDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling update(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling update(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates all view&#x27;s information.
     * Updates all view&#x27;s information (ie. name, columns, filters, etc).
     * @param body Updated all view&#x27;s information. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ViewDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewDTO update(ViewDTO body, Long viewId) throws ApiException {
        ApiResponse<ViewDTO> resp = updateWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates all view&#x27;s information.
     * Updates all view&#x27;s information (ie. name, columns, filters, etc).
     * @param body Updated all view&#x27;s information. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;ViewDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewDTO> updateWithHttpInfo(ViewDTO body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates all view&#x27;s information. (asynchronously)
     * Updates all view&#x27;s information (ie. name, columns, filters, etc).
     * @param body Updated all view&#x27;s information. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(ViewDTO body, Long viewId, final ApiCallback<ViewDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateColumnSettings
     * @param body Updated column&#x27;s specific settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateColumnSettingsCall(Object body, Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}/settings"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "columnName" + "\\}", apiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateColumnSettingsValidateBeforeCall(Object body, Long viewId, String columnName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateColumnSettings(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateColumnSettings(Async)");
        }
        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling updateColumnSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateColumnSettingsCall(body, viewId, columnName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates column&#x27;s specific settings.
     * Updates column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param body Updated column&#x27;s specific settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateColumnSettings(Object body, Long viewId, String columnName) throws ApiException {
        ApiResponse<Object> resp = updateColumnSettingsWithHttpInfo(body, viewId, columnName);
        return resp.getData();
    }

    /**
     * Updates column&#x27;s specific settings.
     * Updates column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param body Updated column&#x27;s specific settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateColumnSettingsWithHttpInfo(Object body, Long viewId, String columnName) throws ApiException {
        com.squareup.okhttp.Call call = updateColumnSettingsValidateBeforeCall(body, viewId, columnName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates column&#x27;s specific settings. (asynchronously)
     * Updates column&#x27;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param body Updated column&#x27;s specific settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param columnName column&#x27;s name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateColumnSettingsAsync(Object body, Long viewId, String columnName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateColumnSettingsValidateBeforeCall(body, viewId, columnName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateColumns
     * @param body Updated columns in view. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateColumnsCall(List<ColumnDTO> body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateColumnsValidateBeforeCall(List<ColumnDTO> body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateColumns(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateColumns(Async)");
        }
        
        com.squareup.okhttp.Call call = updateColumnsCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates columns in view.
     * Updates columns in view.
     * @param body Updated columns in view. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ColumnDTO> updateColumns(List<ColumnDTO> body, Long viewId) throws ApiException {
        ApiResponse<List<ColumnDTO>> resp = updateColumnsWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates columns in view.
     * Updates columns in view.
     * @param body Updated columns in view. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ColumnDTO>> updateColumnsWithHttpInfo(List<ColumnDTO> body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateColumnsValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates columns in view. (asynchronously)
     * Updates columns in view.
     * @param body Updated columns in view. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateColumnsAsync(List<ColumnDTO> body, Long viewId, final ApiCallback<List<ColumnDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateColumnsValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFilter
     * @param body Updated view&#x27;s filter. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFilterCall(List<FilterPropertyDTO> body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFilterValidateBeforeCall(List<FilterPropertyDTO> body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFilter(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFilterCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s filter.
     * Updates view&#x27;s filter.
     * @param body Updated view&#x27;s filter. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return FilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilterDTO updateFilter(List<FilterPropertyDTO> body, Long viewId) throws ApiException {
        ApiResponse<FilterDTO> resp = updateFilterWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s filter.
     * Updates view&#x27;s filter.
     * @param body Updated view&#x27;s filter. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;FilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilterDTO> updateFilterWithHttpInfo(List<FilterPropertyDTO> body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateFilterValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s filter. (asynchronously)
     * Updates view&#x27;s filter.
     * @param body Updated view&#x27;s filter. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFilterAsync(List<FilterPropertyDTO> body, Long viewId, final ApiCallback<FilterDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFilterValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFilterProperty
     * @param body Updated view&#x27;s filter property. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param filterProperty view&#x27;s filter property name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFilterPropertyCall(FilterPropertyDTO body, Long viewId, String filterProperty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter/{filterProperty}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "filterProperty" + "\\}", apiClient.escapeString(filterProperty.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFilterPropertyValidateBeforeCall(FilterPropertyDTO body, Long viewId, String filterProperty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFilterProperty(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateFilterProperty(Async)");
        }
        // verify the required parameter 'filterProperty' is set
        if (filterProperty == null) {
            throw new ApiException("Missing the required parameter 'filterProperty' when calling updateFilterProperty(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFilterPropertyCall(body, viewId, filterProperty, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s filter property.
     * Updates view&#x27;s filter property.
     * @param body Updated view&#x27;s filter property. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param filterProperty view&#x27;s filter property name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object updateFilterProperty(FilterPropertyDTO body, Long viewId, String filterProperty) throws ApiException {
        ApiResponse<Object> resp = updateFilterPropertyWithHttpInfo(body, viewId, filterProperty);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s filter property.
     * Updates view&#x27;s filter property.
     * @param body Updated view&#x27;s filter property. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param filterProperty view&#x27;s filter property name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> updateFilterPropertyWithHttpInfo(FilterPropertyDTO body, Long viewId, String filterProperty) throws ApiException {
        com.squareup.okhttp.Call call = updateFilterPropertyValidateBeforeCall(body, viewId, filterProperty, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s filter property. (asynchronously)
     * Updates view&#x27;s filter property.
     * @param body Updated view&#x27;s filter property. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param filterProperty view&#x27;s filter property name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFilterPropertyAsync(FilterPropertyDTO body, Long viewId, String filterProperty, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFilterPropertyValidateBeforeCall(body, viewId, filterProperty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLocalSettings
     * @param body Updated view&#x27;s local settings (for current user). (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLocalSettingsCall(LocalSettingsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings/local"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLocalSettingsValidateBeforeCall(LocalSettingsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLocalSettings(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateLocalSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateLocalSettingsCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s local settings (for current user).
     * Updates view&#x27;s local settings (for current user).
     * @param body Updated view&#x27;s local settings (for current user). (required)
     * @param viewId view&#x27;s identifier (required)
     * @return LocalSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LocalSettingsDTO updateLocalSettings(LocalSettingsDTO body, Long viewId) throws ApiException {
        ApiResponse<LocalSettingsDTO> resp = updateLocalSettingsWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s local settings (for current user).
     * Updates view&#x27;s local settings (for current user).
     * @param body Updated view&#x27;s local settings (for current user). (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;LocalSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LocalSettingsDTO> updateLocalSettingsWithHttpInfo(LocalSettingsDTO body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateLocalSettingsValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s local settings (for current user). (asynchronously)
     * Updates view&#x27;s local settings (for current user).
     * @param body Updated view&#x27;s local settings (for current user). (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLocalSettingsAsync(LocalSettingsDTO body, Long viewId, final ApiCallback<LocalSettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLocalSettingsValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrder
     * @param body Updated view&#x27;s order settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderCall(OrderDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/order"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderValidateBeforeCall(OrderDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrder(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOrderCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s order settings.
     * Updates view&#x27;s order settings.
     * @param body Updated view&#x27;s order settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return OrderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderDTO updateOrder(OrderDTO body, Long viewId) throws ApiException {
        ApiResponse<OrderDTO> resp = updateOrderWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s order settings.
     * Updates view&#x27;s order settings.
     * @param body Updated view&#x27;s order settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;OrderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderDTO> updateOrderWithHttpInfo(OrderDTO body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s order settings. (asynchronously)
     * Updates view&#x27;s order settings.
     * @param body Updated view&#x27;s order settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderAsync(OrderDTO body, Long viewId, final ApiCallback<OrderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePermissions
     * @param body Updated view&#x27;s permissions. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePermissionsCall(PermissionsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/permissions"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePermissionsValidateBeforeCall(PermissionsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePermissions(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updatePermissions(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePermissionsCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s permissions.
     * Updates view&#x27;s permissions.
     * @param body Updated view&#x27;s permissions. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionsDTO updatePermissions(PermissionsDTO body, Long viewId) throws ApiException {
        ApiResponse<PermissionsDTO> resp = updatePermissionsWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s permissions.
     * Updates view&#x27;s permissions.
     * @param body Updated view&#x27;s permissions. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionsDTO> updatePermissionsWithHttpInfo(PermissionsDTO body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updatePermissionsValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s permissions. (asynchronously)
     * Updates view&#x27;s permissions.
     * @param body Updated view&#x27;s permissions. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePermissionsAsync(PermissionsDTO body, Long viewId, final ApiCallback<PermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePermissionsValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSettings
     * @param body Updated view&#x27;s settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsCall(SettingsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsValidateBeforeCall(SettingsDTO body, Long viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSettings(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSettingsCall(body, viewId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates view&#x27;s settings.
     * Updates view&#x27;s settings.
     * @param body Updated view&#x27;s settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return SettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsDTO updateSettings(SettingsDTO body, Long viewId) throws ApiException {
        ApiResponse<SettingsDTO> resp = updateSettingsWithHttpInfo(body, viewId);
        return resp.getData();
    }

    /**
     * Updates view&#x27;s settings.
     * Updates view&#x27;s settings.
     * @param body Updated view&#x27;s settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @return ApiResponse&lt;SettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsDTO> updateSettingsWithHttpInfo(SettingsDTO body, Long viewId) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsValidateBeforeCall(body, viewId, null, null);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates view&#x27;s settings. (asynchronously)
     * Updates view&#x27;s settings.
     * @param body Updated view&#x27;s settings. (required)
     * @param viewId view&#x27;s identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsAsync(SettingsDTO body, Long viewId, final ApiCallback<SettingsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsValidateBeforeCall(body, viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
