/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BigDecimalDTO;
import io.swagger.client.model.CustomFieldsDTO;
import java.io.File;
import io.swagger.client.model.FileDto;
import io.swagger.client.model.FilesArchiveDto;
import io.swagger.client.model.FilesDto;
import io.swagger.client.model.FinanceDTO;
import io.swagger.client.model.JobDto;
import io.swagger.client.model.PayableCreateDTO;
import io.swagger.client.model.PayableDTO;
import io.swagger.client.model.ProjectFileDto;
import io.swagger.client.model.ProjectStatusDTO;
import io.swagger.client.model.QuoteCreateDTO;
import io.swagger.client.model.QuoteDTO;
import io.swagger.client.model.ReceivableCreateDTO;
import io.swagger.client.model.ReceivableDTO;
import io.swagger.client.model.SmartContactsDTO;
import io.swagger.client.model.SmartCustomFieldDTO;
import io.swagger.client.model.SourceLanguageDTO;
import io.swagger.client.model.SpecializationDTO;
import io.swagger.client.model.StringDTO;
import io.swagger.client.model.TargetLanguagesDTO;
import io.swagger.client.model.TimeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotesSmartV2Api {
    private ApiClient apiClient;

    public QuotesSmartV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesSmartV2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFiles2
     * @param body Added files to the quote as added by PM. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFiles2Call(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files/add"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFiles2ValidateBeforeCall(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFiles2(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling addFiles2(Async)");
        }
        
        com.squareup.okhttp.Call call = addFiles2Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds files to the quote as added by PM.
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param body Added files to the quote as added by PM. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFiles2(TimeDTO body, String quoteId) throws ApiException {
        addFiles2WithHttpInfo(body, quoteId);
    }

    /**
     * Adds files to the quote as added by PM.
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param body Added files to the quote as added by PM. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFiles2WithHttpInfo(TimeDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = addFiles2ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds files to the quote as added by PM. (asynchronously)
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param body Added files to the quote as added by PM. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFiles2Async(TimeDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFiles2ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for archive1
     * @param body Prepared ZIP archive that contains the specified files. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archive1Call(FilesDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/files/archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archive1ValidateBeforeCall(FilesDto body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling archive1(Async)");
        }
        
        com.squareup.okhttp.Call call = archive1Call(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param body Prepared ZIP archive that contains the specified files. (required)
     * @return FilesArchiveDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesArchiveDto archive1(FilesDto body) throws ApiException {
        ApiResponse<FilesArchiveDto> resp = archive1WithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param body Prepared ZIP archive that contains the specified files. (required)
     * @return ApiResponse&lt;FilesArchiveDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesArchiveDto> archive1WithHttpInfo(FilesDto body) throws ApiException {
        com.squareup.okhttp.Call call = archive1ValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Prepares a ZIP archive that contains the specified files. (asynchronously)
     * Prepares a ZIP archive that contains the specified files.
     * @param body Prepared ZIP archive that contains the specified files. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archive1Async(FilesDto body, final ApiCallback<FilesArchiveDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archive1ValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeStatus2
     * @param body Changed Quote status. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeStatus2Call(ProjectStatusDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/status"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeStatus2ValidateBeforeCall(ProjectStatusDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeStatus2(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling changeStatus2(Async)");
        }
        
        com.squareup.okhttp.Call call = changeStatus2Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param body Changed Quote status. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeStatus2(ProjectStatusDTO body, String quoteId) throws ApiException {
        changeStatus2WithHttpInfo(body, quoteId);
    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param body Changed Quote status. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeStatus2WithHttpInfo(ProjectStatusDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = changeStatus2ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise). (asynchronously)
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param body Changed Quote status. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeStatus2Async(ProjectStatusDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeStatus2ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for create3
     * @param body Project to create (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call create3Call(QuoteCreateDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call create3ValidateBeforeCall(QuoteCreateDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = create3Call(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new Smart Quote.
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param body Project to create (optional)
     * @return QuoteDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuoteDTO create3(QuoteCreateDTO body) throws ApiException {
        ApiResponse<QuoteDTO> resp = create3WithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new Smart Quote.
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param body Project to create (optional)
     * @return ApiResponse&lt;QuoteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuoteDTO> create3WithHttpInfo(QuoteCreateDTO body) throws ApiException {
        com.squareup.okhttp.Call call = create3ValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<QuoteDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Smart Quote. (asynchronously)
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param body Project to create (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call create3Async(QuoteCreateDTO body, final ApiCallback<QuoteDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = create3ValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuoteDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPayable1
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPayable1Call(PayableCreateDTO body, String quote&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPayable1ValidateBeforeCall(PayableCreateDTO body, String quote&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPayable1(Async)");
        }
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling createPayable1(Async)");
        }
        
        com.squareup.okhttp.Call call = createPayable1Call(body, quote&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a payable to a quote.
     * Adds a payable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayableDTO createPayable1(PayableCreateDTO body, String quote&#x27;sInternalIdentifier) throws ApiException {
        ApiResponse<PayableDTO> resp = createPayable1WithHttpInfo(body, quote&#x27;sInternalIdentifier);
        return resp.getData();
    }

    /**
     * Adds a payable to a quote.
     * Adds a payable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayableDTO> createPayable1WithHttpInfo(PayableCreateDTO body, String quote&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createPayable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a payable to a quote. (asynchronously)
     * Adds a payable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPayable1Async(PayableCreateDTO body, String quote&#x27;sInternalIdentifier, final ApiCallback<PayableDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPayable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createReceivable1
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createReceivable1Call(ReceivableCreateDTO body, String quote&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createReceivable1ValidateBeforeCall(ReceivableCreateDTO body, String quote&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReceivable1(Async)");
        }
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling createReceivable1(Async)");
        }
        
        com.squareup.okhttp.Call call = createReceivable1Call(body, quote&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a receivable to a quote.
     * Adds a receivable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivableDTO createReceivable1(ReceivableCreateDTO body, String quote&#x27;sInternalIdentifier) throws ApiException {
        ApiResponse<ReceivableDTO> resp = createReceivable1WithHttpInfo(body, quote&#x27;sInternalIdentifier);
        return resp.getData();
    }

    /**
     * Adds a receivable to a quote.
     * Adds a receivable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivableDTO> createReceivable1WithHttpInfo(ReceivableCreateDTO body, String quote&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createReceivable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a receivable to a quote. (asynchronously)
     * Adds a receivable to a quote.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createReceivable1Async(ReceivableCreateDTO body, String quote&#x27;sInternalIdentifier, final ApiCallback<ReceivableDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createReceivable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePayable
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePayableCall(String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables/{payableId}"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()))
            .replaceAll("\\{" + "payable&#x27;s internal identifier" + "\\}", apiClient.escapeString(payable'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePayableValidateBeforeCall(String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling deletePayable(Async)");
        }
        // verify the required parameter 'payable&#x27;sInternalIdentifier' is set
        if (payable&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'payable&#x27;sInternalIdentifier' when calling deletePayable(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePayableCall(quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePayable(String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier) throws ApiException {
        deletePayableWithHttpInfo(quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier);
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePayableWithHttpInfo(String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deletePayableValidateBeforeCall(quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a payable. (asynchronously)
     * Deletes a payable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePayableAsync(String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePayableValidateBeforeCall(quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReceivable
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReceivableCall(String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()))
            .replaceAll("\\{" + "receivable&#x27;s internal identifier" + "\\}", apiClient.escapeString(receivable'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReceivableValidateBeforeCall(String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling deleteReceivable(Async)");
        }
        // verify the required parameter 'receivable&#x27;sInternalIdentifier' is set
        if (receivable&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'receivable&#x27;sInternalIdentifier' when calling deleteReceivable(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteReceivableCall(quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReceivable(String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier) throws ApiException {
        deleteReceivableWithHttpInfo(quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier);
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReceivableWithHttpInfo(String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteReceivableValidateBeforeCall(quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a receivable. (asynchronously)
     * Deletes a receivable.
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReceivableAsync(String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReceivableValidateBeforeCall(quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getById10
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getById10Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getById10ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getById10(Async)");
        }
        
        com.squareup.okhttp.Call call = getById10Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return QuoteDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuoteDTO getById10(String quoteId) throws ApiException {
        ApiResponse<QuoteDTO> resp = getById10WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;QuoteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuoteDTO> getById10WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getById10ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<QuoteDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns quote details. (asynchronously)
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getById10Async(String quoteId, final ApiCallback<QuoteDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getById10ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuoteDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts3
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContacts3Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientContacts"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContacts3ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getContacts3(Async)");
        }
        
        com.squareup.okhttp.Call call = getContacts3Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Client Contacts information for a quote.
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmartContactsDTO getContacts3(String quoteId) throws ApiException {
        ApiResponse<SmartContactsDTO> resp = getContacts3WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns Client Contacts information for a quote.
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmartContactsDTO> getContacts3WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getContacts3ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Client Contacts information for a quote. (asynchronously)
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContacts3Async(String quoteId, final ApiCallback<SmartContactsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContacts3ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomFields9
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomFields9Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/customFields"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomFields9ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getCustomFields9(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomFields9Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return CustomFieldsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomFieldsDTO getCustomFields9(String quoteId) throws ApiException {
        ApiResponse<CustomFieldsDTO> resp = getCustomFields9WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;CustomFieldsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomFieldsDTO> getCustomFields9WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomFields9ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<CustomFieldsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of custom field keys and values for a project. (asynchronously)
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomFields9Async(String quoteId, final ApiCallback<CustomFieldsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomFields9ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomFieldsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileById2
     * @param fileId file&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileById2Call(String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileById2ValidateBeforeCall(String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById2(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileById2Call(fileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#x27;s internal identifier (required)
     * @return ProjectFileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectFileDto getFileById2(String fileId) throws ApiException {
        ApiResponse<ProjectFileDto> resp = getFileById2WithHttpInfo(fileId);
        return resp.getData();
    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#x27;s internal identifier (required)
     * @return ApiResponse&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectFileDto> getFileById2WithHttpInfo(String fileId) throws ApiException {
        com.squareup.okhttp.Call call = getFileById2ValidateBeforeCall(fileId, null, null);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns details of a file. (asynchronously)
     * Returns details of a file.
     * @param fileId file&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileById2Async(String fileId, final ApiCallback<ProjectFileDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileById2ValidateBeforeCall(fileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileContentById1
     * @param fileId file&#x27;s internal identifier (required)
     * @param fileName file&#x27;s name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileContentById1Call(String fileId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/files/{fileId}/download/{fileName}"
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileContentById1ValidateBeforeCall(String fileId, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileContentById1(Async)");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getFileContentById1(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileContentById1Call(fileId, fileName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#x27;s internal identifier (required)
     * @param fileName file&#x27;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getFileContentById1(String fileId, String fileName) throws ApiException {
        getFileContentById1WithHttpInfo(fileId, fileName);
    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#x27;s internal identifier (required)
     * @param fileName file&#x27;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getFileContentById1WithHttpInfo(String fileId, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = getFileContentById1ValidateBeforeCall(fileId, fileName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Downloads a file content. (asynchronously)
     * Downloads a file content.
     * @param fileId file&#x27;s internal identifier (required)
     * @param fileName file&#x27;s name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileContentById1Async(String fileId, String fileName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileContentById1ValidateBeforeCall(fileId, fileName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFiles1
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFiles1Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFiles1ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getFiles1(Async)");
        }
        
        com.squareup.okhttp.Call call = getFiles1Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns list of files in a quote.
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return List&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectFileDto> getFiles1(String quoteId) throws ApiException {
        ApiResponse<List<ProjectFileDto>> resp = getFiles1WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns list of files in a quote.
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;ProjectFileDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectFileDto>> getFiles1WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getFiles1ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of files in a quote. (asynchronously)
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFiles1Async(String quoteId, final ApiCallback<List<ProjectFileDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFiles1ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFinance3
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFinance3Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFinance3ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getFinance3(Async)");
        }
        
        com.squareup.okhttp.Call call = getFinance3Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns finance information for a quote.
     * Returns finance information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return FinanceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FinanceDTO getFinance3(String quoteId) throws ApiException {
        ApiResponse<FinanceDTO> resp = getFinance3WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns finance information for a quote.
     * Returns finance information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;FinanceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FinanceDTO> getFinance3WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getFinance3ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns finance information for a quote. (asynchronously)
     * Returns finance information for a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFinance3Async(String quoteId, final ApiCallback<FinanceDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFinance3ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobs1
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobs1Call(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/jobs"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobs1ValidateBeforeCall(String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getJobs1(Async)");
        }
        
        com.squareup.okhttp.Call call = getJobs1Call(quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns list of jobs in a quote.
     * Returns list of jobs in a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return List&lt;JobDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobDto> getJobs1(String quoteId) throws ApiException {
        ApiResponse<List<JobDto>> resp = getJobs1WithHttpInfo(quoteId);
        return resp.getData();
    }

    /**
     * Returns list of jobs in a quote.
     * Returns list of jobs in a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;JobDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobDto>> getJobs1WithHttpInfo(String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = getJobs1ValidateBeforeCall(quoteId, null, null);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns list of jobs in a quote. (asynchronously)
     * Returns list of jobs in a quote.
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobs1Async(String quoteId, final ApiCallback<List<JobDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobs1ValidateBeforeCall(quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBusinessDays
     * @param body Updated Business Days for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBusinessDaysCall(Integer body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/businessDays"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBusinessDaysValidateBeforeCall(Integer body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBusinessDays(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateBusinessDays(Async)");
        }
        
        com.squareup.okhttp.Call call = updateBusinessDaysCall(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Business Days for a quote.
     * Updates Business Days for a quote.
     * @param body Updated Business Days for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateBusinessDays(Integer body, String quoteId) throws ApiException {
        updateBusinessDaysWithHttpInfo(body, quoteId);
    }

    /**
     * Updates Business Days for a quote.
     * Updates Business Days for a quote.
     * @param body Updated Business Days for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateBusinessDaysWithHttpInfo(Integer body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateBusinessDaysValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Business Days for a quote. (asynchronously)
     * Updates Business Days for a quote.
     * @param body Updated Business Days for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBusinessDaysAsync(Integer body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBusinessDaysValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateClientNotes1
     * @param body Updated Client Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientNotes1Call(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientNotes"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientNotes1ValidateBeforeCall(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateClientNotes1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateClientNotes1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateClientNotes1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Client Notes for a quote.
     * Updates Client Notes for a quote.
     * @param body Updated Client Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateClientNotes1(StringDTO body, String quoteId) throws ApiException {
        updateClientNotes1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates Client Notes for a quote.
     * Updates Client Notes for a quote.
     * @param body Updated Client Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateClientNotes1WithHttpInfo(StringDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientNotes1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Client Notes for a quote. (asynchronously)
     * Updates Client Notes for a quote.
     * @param body Updated Client Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientNotes1Async(StringDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientNotes1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateClientReferenceNumber1
     * @param body Updated Client Reference Number for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientReferenceNumber1Call(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientReferenceNumber"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientReferenceNumber1ValidateBeforeCall(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateClientReferenceNumber1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateClientReferenceNumber1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateClientReferenceNumber1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Client Reference Number for a quote.
     * Updates Client Reference Number for a quote.
     * @param body Updated Client Reference Number for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateClientReferenceNumber1(StringDTO body, String quoteId) throws ApiException {
        updateClientReferenceNumber1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates Client Reference Number for a quote.
     * Updates Client Reference Number for a quote.
     * @param body Updated Client Reference Number for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateClientReferenceNumber1WithHttpInfo(StringDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientReferenceNumber1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Client Reference Number for a quote. (asynchronously)
     * Updates Client Reference Number for a quote.
     * @param body Updated Client Reference Number for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientReferenceNumber1Async(StringDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientReferenceNumber1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateContacts
     * @param body Updated Client Contacts for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContactsCall(SmartContactsDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientContacts"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContactsValidateBeforeCall(SmartContactsDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContacts(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateContacts(Async)");
        }
        
        com.squareup.okhttp.Call call = updateContactsCall(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Client Contacts for a quote.
     * Updates Client Contacts for a quote.
     * @param body Updated Client Contacts for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmartContactsDTO updateContacts(SmartContactsDTO body, String quoteId) throws ApiException {
        ApiResponse<SmartContactsDTO> resp = updateContactsWithHttpInfo(body, quoteId);
        return resp.getData();
    }

    /**
     * Updates Client Contacts for a quote.
     * Updates Client Contacts for a quote.
     * @param body Updated Client Contacts for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmartContactsDTO> updateContactsWithHttpInfo(SmartContactsDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateContactsValidateBeforeCall(body, quoteId, null, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates Client Contacts for a quote. (asynchronously)
     * Updates Client Contacts for a quote.
     * @param body Updated Client Contacts for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContactsAsync(SmartContactsDTO body, String quoteId, final ApiCallback<SmartContactsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContactsValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomField1
     * @param body Updated custom field with a specified key in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param key custom field&#x27;s key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomField1Call(SmartCustomFieldDTO body, String quoteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/customFields/{key}"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomField1ValidateBeforeCall(SmartCustomFieldDTO body, String quoteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCustomField1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateCustomField1(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCustomField1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCustomField1Call(body, quoteId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a custom field with a specified key in a quote.
     * Updates a custom field with a specified key in a quote.
     * @param body Updated custom field with a specified key in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param key custom field&#x27;s key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCustomField1(SmartCustomFieldDTO body, String quoteId, String key) throws ApiException {
        updateCustomField1WithHttpInfo(body, quoteId, key);
    }

    /**
     * Updates a custom field with a specified key in a quote.
     * Updates a custom field with a specified key in a quote.
     * @param body Updated custom field with a specified key in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param key custom field&#x27;s key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCustomField1WithHttpInfo(SmartCustomFieldDTO body, String quoteId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomField1ValidateBeforeCall(body, quoteId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a custom field with a specified key in a quote. (asynchronously)
     * Updates a custom field with a specified key in a quote.
     * @param body Updated custom field with a specified key in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param key custom field&#x27;s key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomField1Async(SmartCustomFieldDTO body, String quoteId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomField1ValidateBeforeCall(body, quoteId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateExpectedDeliveryDate
     * @param body Updated Expected Delivery Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExpectedDeliveryDateCall(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/expectedDeliveryDate"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExpectedDeliveryDateValidateBeforeCall(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExpectedDeliveryDate(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateExpectedDeliveryDate(Async)");
        }
        
        com.squareup.okhttp.Call call = updateExpectedDeliveryDateCall(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Expected Delivery Date for a quote.
     * Updates Expected Delivery Date for a quote.
     * @param body Updated Expected Delivery Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExpectedDeliveryDate(TimeDTO body, String quoteId) throws ApiException {
        updateExpectedDeliveryDateWithHttpInfo(body, quoteId);
    }

    /**
     * Updates Expected Delivery Date for a quote.
     * Updates Expected Delivery Date for a quote.
     * @param body Updated Expected Delivery Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExpectedDeliveryDateWithHttpInfo(TimeDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateExpectedDeliveryDateValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Expected Delivery Date for a quote. (asynchronously)
     * Updates Expected Delivery Date for a quote.
     * @param body Updated Expected Delivery Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExpectedDeliveryDateAsync(TimeDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExpectedDeliveryDateValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInternalNotes1
     * @param body Updated Internal Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInternalNotes1Call(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/internalNotes"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInternalNotes1ValidateBeforeCall(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInternalNotes1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateInternalNotes1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateInternalNotes1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Internal Notes for a quote.
     * Updates Internal Notes for a quote.
     * @param body Updated Internal Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateInternalNotes1(StringDTO body, String quoteId) throws ApiException {
        updateInternalNotes1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates Internal Notes for a quote.
     * Updates Internal Notes for a quote.
     * @param body Updated Internal Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateInternalNotes1WithHttpInfo(StringDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateInternalNotes1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Internal Notes for a quote. (asynchronously)
     * Updates Internal Notes for a quote.
     * @param body Updated Internal Notes for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInternalNotes1Async(StringDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInternalNotes1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePayable1
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePayable1Call(PayableDTO body, String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables/{payableId}"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()))
            .replaceAll("\\{" + "payable&#x27;s internal identifier" + "\\}", apiClient.escapeString(payable'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePayable1ValidateBeforeCall(PayableDTO body, String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePayable1(Async)");
        }
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling updatePayable1(Async)");
        }
        // verify the required parameter 'payable&#x27;sInternalIdentifier' is set
        if (payable&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'payable&#x27;sInternalIdentifier' when calling updatePayable1(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePayable1Call(body, quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayableDTO updatePayable1(PayableDTO body, String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier) throws ApiException {
        ApiResponse<PayableDTO> resp = updatePayable1WithHttpInfo(body, quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier);
        return resp.getData();
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayableDTO> updatePayable1WithHttpInfo(PayableDTO body, String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updatePayable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, null, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a payable. (asynchronously)
     * Updates a payable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param payable&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePayable1Async(PayableDTO body, String quote&#x27;sInternalIdentifier, Long payable&#x27;sInternalIdentifier, final ApiCallback<PayableDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePayable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQuoteExpiry
     * @param body Updated Quote Expiry Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuoteExpiryCall(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/quoteExpiry"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuoteExpiryValidateBeforeCall(TimeDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateQuoteExpiry(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateQuoteExpiry(Async)");
        }
        
        com.squareup.okhttp.Call call = updateQuoteExpiryCall(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates Quote Expiry Date for a quote.
     * Updates Quote Expiry Date for a quote.
     * @param body Updated Quote Expiry Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuoteExpiry(TimeDTO body, String quoteId) throws ApiException {
        updateQuoteExpiryWithHttpInfo(body, quoteId);
    }

    /**
     * Updates Quote Expiry Date for a quote.
     * Updates Quote Expiry Date for a quote.
     * @param body Updated Quote Expiry Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuoteExpiryWithHttpInfo(TimeDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateQuoteExpiryValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates Quote Expiry Date for a quote. (asynchronously)
     * Updates Quote Expiry Date for a quote.
     * @param body Updated Quote Expiry Date for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuoteExpiryAsync(TimeDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuoteExpiryValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateReceivable1
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReceivable1Call(ReceivableDTO body, String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replaceAll("\\{" + "quote&#x27;s internal identifier" + "\\}", apiClient.escapeString(quote'sInternalIdentifier.toString()))
            .replaceAll("\\{" + "receivable&#x27;s internal identifier" + "\\}", apiClient.escapeString(receivable'sInternalIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReceivable1ValidateBeforeCall(ReceivableDTO body, String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReceivable1(Async)");
        }
        // verify the required parameter 'quote&#x27;sInternalIdentifier' is set
        if (quote&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'quote&#x27;sInternalIdentifier' when calling updateReceivable1(Async)");
        }
        // verify the required parameter 'receivable&#x27;sInternalIdentifier' is set
        if (receivable&#x27;sInternalIdentifier == null) {
            throw new ApiException("Missing the required parameter 'receivable&#x27;sInternalIdentifier' when calling updateReceivable1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateReceivable1Call(body, quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceivableDTO updateReceivable1(ReceivableDTO body, String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier) throws ApiException {
        ApiResponse<ReceivableDTO> resp = updateReceivable1WithHttpInfo(body, quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier);
        return resp.getData();
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceivableDTO> updateReceivable1WithHttpInfo(ReceivableDTO body, String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateReceivable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a receivable. (asynchronously)
     * Updates a receivable.
     * @param body  (required)
     * @param quote&#x27;sInternalIdentifier  (required)
     * @param receivable&#x27;sInternalIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReceivable1Async(ReceivableDTO body, String quote&#x27;sInternalIdentifier, Long receivable&#x27;sInternalIdentifier, final ApiCallback<ReceivableDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReceivable1ValidateBeforeCall(body, quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSourceLanguage1
     * @param body Updated source language for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSourceLanguage1Call(SourceLanguageDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/sourceLanguage"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSourceLanguage1ValidateBeforeCall(SourceLanguageDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSourceLanguage1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateSourceLanguage1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSourceLanguage1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates source language for a quote.
     * Updates source language for a quote.
     * @param body Updated source language for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSourceLanguage1(SourceLanguageDTO body, String quoteId) throws ApiException {
        updateSourceLanguage1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates source language for a quote.
     * Updates source language for a quote.
     * @param body Updated source language for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSourceLanguage1WithHttpInfo(SourceLanguageDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateSourceLanguage1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates source language for a quote. (asynchronously)
     * Updates source language for a quote.
     * @param body Updated source language for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSourceLanguage1Async(SourceLanguageDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSourceLanguage1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSpecialization1
     * @param body Updated specialization for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialization1Call(SpecializationDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/specialization"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSpecialization1ValidateBeforeCall(SpecializationDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSpecialization1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateSpecialization1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSpecialization1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates specialization for a quote.
     * Updates specialization for a quote.
     * @param body Updated specialization for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSpecialization1(SpecializationDTO body, String quoteId) throws ApiException {
        updateSpecialization1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates specialization for a quote.
     * Updates specialization for a quote.
     * @param body Updated specialization for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSpecialization1WithHttpInfo(SpecializationDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialization1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates specialization for a quote. (asynchronously)
     * Updates specialization for a quote.
     * @param body Updated specialization for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialization1Async(SpecializationDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialization1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateTargetLanguages1
     * @param body Updated target languages for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTargetLanguages1Call(TargetLanguagesDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/targetLanguages"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTargetLanguages1ValidateBeforeCall(TargetLanguagesDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTargetLanguages1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateTargetLanguages1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTargetLanguages1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates target languages for a quote.
     * Updates target languages for a quote.
     * @param body Updated target languages for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTargetLanguages1(TargetLanguagesDTO body, String quoteId) throws ApiException {
        updateTargetLanguages1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates target languages for a quote.
     * Updates target languages for a quote.
     * @param body Updated target languages for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTargetLanguages1WithHttpInfo(TargetLanguagesDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateTargetLanguages1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates target languages for a quote. (asynchronously)
     * Updates target languages for a quote.
     * @param body Updated target languages for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTargetLanguages1Async(TargetLanguagesDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTargetLanguages1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateVendorInstructions1
     * @param body Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVendorInstructions1Call(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/vendorInstructions"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVendorInstructions1ValidateBeforeCall(StringDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVendorInstructions1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateVendorInstructions1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateVendorInstructions1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param body Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVendorInstructions1(StringDTO body, String quoteId) throws ApiException {
        updateVendorInstructions1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param body Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVendorInstructions1WithHttpInfo(StringDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateVendorInstructions1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote. (asynchronously)
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param body Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVendorInstructions1Async(StringDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVendorInstructions1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateVolume1
     * @param body Updated volume for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVolume1Call(BigDecimalDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/volume"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVolume1ValidateBeforeCall(BigDecimalDTO body, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateVolume1(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateVolume1(Async)");
        }
        
        com.squareup.okhttp.Call call = updateVolume1Call(body, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates volume for a quote.
     * Updates volume for a quote.
     * @param body Updated volume for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVolume1(BigDecimalDTO body, String quoteId) throws ApiException {
        updateVolume1WithHttpInfo(body, quoteId);
    }

    /**
     * Updates volume for a quote.
     * Updates volume for a quote.
     * @param body Updated volume for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVolume1WithHttpInfo(BigDecimalDTO body, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = updateVolume1ValidateBeforeCall(body, quoteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates volume for a quote. (asynchronously)
     * Updates volume for a quote.
     * @param body Updated volume for a quote. (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVolume1Async(BigDecimalDTO body, String quoteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVolume1ValidateBeforeCall(body, quoteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadFile3
     * @param file  (required)
     * @param fileName  (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFile3Call(File file, String fileName, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files/upload"
            .replaceAll("\\{" + "quoteId" + "\\}", apiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (fileName != null)
        localVarFormParams.put("fileName", fileName);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFile3ValidateBeforeCall(File file, String fileName, String quoteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile3(Async)");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling uploadFile3(Async)");
        }
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling uploadFile3(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadFile3Call(file, fileName, quoteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads file to the quote as a file uploaded by PM.
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param file  (required)
     * @param fileName  (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return FileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileDto uploadFile3(File file, String fileName, String quoteId) throws ApiException {
        ApiResponse<FileDto> resp = uploadFile3WithHttpInfo(file, fileName, quoteId);
        return resp.getData();
    }

    /**
     * Uploads file to the quote as a file uploaded by PM.
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param file  (required)
     * @param fileName  (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @return ApiResponse&lt;FileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileDto> uploadFile3WithHttpInfo(File file, String fileName, String quoteId) throws ApiException {
        com.squareup.okhttp.Call call = uploadFile3ValidateBeforeCall(file, fileName, quoteId, null, null);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads file to the quote as a file uploaded by PM. (asynchronously)
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param file  (required)
     * @param fileName  (required)
     * @param quoteId quote&#x27;s internal identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFile3Async(File file, String fileName, String quoteId, final ApiCallback<FileDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFile3ValidateBeforeCall(file, fileName, quoteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
