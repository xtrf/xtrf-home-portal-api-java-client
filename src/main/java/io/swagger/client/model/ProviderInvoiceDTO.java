/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ProviderInvoiceDatesDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * ProviderInvoiceDTO
 */


public class ProviderInvoiceDTO {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("totalGross")
  private BigDecimal totalGross = null;

  @SerializedName("totalNetto")
  private BigDecimal totalNetto = null;

  @SerializedName("currencyId")
  private Long currencyId = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    POSTPONED("POSTPONED"),
    TO_BE_SENT("TO_BE_SENT"),
    SENT("SENT"),
    CONFIRMED("CONFIRMED"),
    BILL_CREATED("BILL_CREATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("finalNumber")
  private String finalNumber = null;

  @SerializedName("draftNumber")
  private String draftNumber = null;

  @SerializedName("internalNumber")
  private String internalNumber = null;

  @SerializedName("providerId")
  private Long providerId = null;

  @SerializedName("totalGrossInWords")
  private String totalGrossInWords = null;

  @SerializedName("jobsNetValue")
  private BigDecimal jobsNetValue = null;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    NOT_PAID("NOT_PAID"),
    FULLY_PAID("FULLY_PAID"),
    IRRECOVERABLE("IRRECOVERABLE"),
    PARTIALLY_PAID("PARTIALLY_PAID");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PaymentStatusEnum fromValue(String text) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("paymentStatus")
  private PaymentStatusEnum paymentStatus = null;

  @SerializedName("dates")
  private ProviderInvoiceDatesDTO dates = null;

  @SerializedName("notesFromProvider")
  private String notesFromProvider = null;

  public ProviderInvoiceDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ProviderInvoiceDTO totalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
    return this;
  }

   /**
   * Get totalGross
   * @return totalGross
  **/
  @Schema(description = "")
  public BigDecimal getTotalGross() {
    return totalGross;
  }

  public void setTotalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
  }

  public ProviderInvoiceDTO totalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
    return this;
  }

   /**
   * Get totalNetto
   * @return totalNetto
  **/
  @Schema(description = "")
  public BigDecimal getTotalNetto() {
    return totalNetto;
  }

  public void setTotalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
  }

  public ProviderInvoiceDTO currencyId(Long currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Get currencyId
   * @return currencyId
  **/
  @Schema(description = "")
  public Long getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Long currencyId) {
    this.currencyId = currencyId;
  }

  public ProviderInvoiceDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ProviderInvoiceDTO finalNumber(String finalNumber) {
    this.finalNumber = finalNumber;
    return this;
  }

   /**
   * Get finalNumber
   * @return finalNumber
  **/
  @Schema(description = "")
  public String getFinalNumber() {
    return finalNumber;
  }

  public void setFinalNumber(String finalNumber) {
    this.finalNumber = finalNumber;
  }

  public ProviderInvoiceDTO draftNumber(String draftNumber) {
    this.draftNumber = draftNumber;
    return this;
  }

   /**
   * Get draftNumber
   * @return draftNumber
  **/
  @Schema(description = "")
  public String getDraftNumber() {
    return draftNumber;
  }

  public void setDraftNumber(String draftNumber) {
    this.draftNumber = draftNumber;
  }

  public ProviderInvoiceDTO internalNumber(String internalNumber) {
    this.internalNumber = internalNumber;
    return this;
  }

   /**
   * Get internalNumber
   * @return internalNumber
  **/
  @Schema(description = "")
  public String getInternalNumber() {
    return internalNumber;
  }

  public void setInternalNumber(String internalNumber) {
    this.internalNumber = internalNumber;
  }

  public ProviderInvoiceDTO providerId(Long providerId) {
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @Schema(description = "")
  public Long getProviderId() {
    return providerId;
  }

  public void setProviderId(Long providerId) {
    this.providerId = providerId;
  }

  public ProviderInvoiceDTO totalGrossInWords(String totalGrossInWords) {
    this.totalGrossInWords = totalGrossInWords;
    return this;
  }

   /**
   * Get totalGrossInWords
   * @return totalGrossInWords
  **/
  @Schema(description = "")
  public String getTotalGrossInWords() {
    return totalGrossInWords;
  }

  public void setTotalGrossInWords(String totalGrossInWords) {
    this.totalGrossInWords = totalGrossInWords;
  }

  public ProviderInvoiceDTO jobsNetValue(BigDecimal jobsNetValue) {
    this.jobsNetValue = jobsNetValue;
    return this;
  }

   /**
   * Get jobsNetValue
   * @return jobsNetValue
  **/
  @Schema(description = "")
  public BigDecimal getJobsNetValue() {
    return jobsNetValue;
  }

  public void setJobsNetValue(BigDecimal jobsNetValue) {
    this.jobsNetValue = jobsNetValue;
  }

  public ProviderInvoiceDTO paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @Schema(description = "")
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public ProviderInvoiceDTO dates(ProviderInvoiceDatesDTO dates) {
    this.dates = dates;
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @Schema(description = "")
  public ProviderInvoiceDatesDTO getDates() {
    return dates;
  }

  public void setDates(ProviderInvoiceDatesDTO dates) {
    this.dates = dates;
  }

  public ProviderInvoiceDTO notesFromProvider(String notesFromProvider) {
    this.notesFromProvider = notesFromProvider;
    return this;
  }

   /**
   * Get notesFromProvider
   * @return notesFromProvider
  **/
  @Schema(description = "")
  public String getNotesFromProvider() {
    return notesFromProvider;
  }

  public void setNotesFromProvider(String notesFromProvider) {
    this.notesFromProvider = notesFromProvider;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderInvoiceDTO providerInvoiceDTO = (ProviderInvoiceDTO) o;
    return Objects.equals(this.id, providerInvoiceDTO.id) &&
        Objects.equals(this.totalGross, providerInvoiceDTO.totalGross) &&
        Objects.equals(this.totalNetto, providerInvoiceDTO.totalNetto) &&
        Objects.equals(this.currencyId, providerInvoiceDTO.currencyId) &&
        Objects.equals(this.status, providerInvoiceDTO.status) &&
        Objects.equals(this.finalNumber, providerInvoiceDTO.finalNumber) &&
        Objects.equals(this.draftNumber, providerInvoiceDTO.draftNumber) &&
        Objects.equals(this.internalNumber, providerInvoiceDTO.internalNumber) &&
        Objects.equals(this.providerId, providerInvoiceDTO.providerId) &&
        Objects.equals(this.totalGrossInWords, providerInvoiceDTO.totalGrossInWords) &&
        Objects.equals(this.jobsNetValue, providerInvoiceDTO.jobsNetValue) &&
        Objects.equals(this.paymentStatus, providerInvoiceDTO.paymentStatus) &&
        Objects.equals(this.dates, providerInvoiceDTO.dates) &&
        Objects.equals(this.notesFromProvider, providerInvoiceDTO.notesFromProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, totalGross, totalNetto, currencyId, status, finalNumber, draftNumber, internalNumber, providerId, totalGrossInWords, jobsNetValue, paymentStatus, dates, notesFromProvider);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderInvoiceDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("    totalNetto: ").append(toIndentedString(totalNetto)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    finalNumber: ").append(toIndentedString(finalNumber)).append("\n");
    sb.append("    draftNumber: ").append(toIndentedString(draftNumber)).append("\n");
    sb.append("    internalNumber: ").append(toIndentedString(internalNumber)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    totalGrossInWords: ").append(toIndentedString(totalGrossInWords)).append("\n");
    sb.append("    jobsNetValue: ").append(toIndentedString(jobsNetValue)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    notesFromProvider: ").append(toIndentedString(notesFromProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
