/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EventsQueue;
import io.swagger.client.model.Identifier;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DictionaryEntity
 */


public class DictionaryEntity {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("lastModificationDate")
  private OffsetDateTime lastModificationDate = null;

  @SerializedName("auditPath")
  private String auditPath = null;

  @SerializedName("classSimpleName")
  private String classSimpleName = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("preferedEntity")
  private Boolean preferedEntity = null;

  @SerializedName("defaultEntity")
  private Boolean defaultEntity = null;

  @SerializedName("preferred")
  private Boolean preferred = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("packedCompoundId")
  private String packedCompoundId = null;

  @SerializedName("compoundId")
  private String compoundId = null;

  @SerializedName("auditDisplayName")
  private String auditDisplayName = null;

  @SerializedName("entityMarkedAsNotSupposedToBePersisted")
  private Boolean entityMarkedAsNotSupposedToBePersisted = null;

  @SerializedName("classNameKey")
  private String classNameKey = null;

  @SerializedName("internalDescription")
  private String internalDescription = null;

  @SerializedName("andClearEventsQueue")
  private EventsQueue andClearEventsQueue = null;

  @SerializedName("eventsQueueReadyToBeDispatched")
  private Boolean eventsQueueReadyToBeDispatched = null;

  @SerializedName("identifier")
  private Identifier identifier = null;

  public DictionaryEntity id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DictionaryEntity version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public DictionaryEntity lastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
    return this;
  }

   /**
   * Get lastModificationDate
   * @return lastModificationDate
  **/
  @Schema(description = "")
  public OffsetDateTime getLastModificationDate() {
    return lastModificationDate;
  }

  public void setLastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
  }

  public DictionaryEntity auditPath(String auditPath) {
    this.auditPath = auditPath;
    return this;
  }

   /**
   * Get auditPath
   * @return auditPath
  **/
  @Schema(description = "")
  public String getAuditPath() {
    return auditPath;
  }

  public void setAuditPath(String auditPath) {
    this.auditPath = auditPath;
  }

  public DictionaryEntity classSimpleName(String classSimpleName) {
    this.classSimpleName = classSimpleName;
    return this;
  }

   /**
   * Get classSimpleName
   * @return classSimpleName
  **/
  @Schema(description = "")
  public String getClassSimpleName() {
    return classSimpleName;
  }

  public void setClassSimpleName(String classSimpleName) {
    this.classSimpleName = classSimpleName;
  }

  public DictionaryEntity active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @Schema(description = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public DictionaryEntity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DictionaryEntity preferedEntity(Boolean preferedEntity) {
    this.preferedEntity = preferedEntity;
    return this;
  }

   /**
   * Get preferedEntity
   * @return preferedEntity
  **/
  @Schema(required = true, description = "")
  public Boolean isPreferedEntity() {
    return preferedEntity;
  }

  public void setPreferedEntity(Boolean preferedEntity) {
    this.preferedEntity = preferedEntity;
  }

  public DictionaryEntity defaultEntity(Boolean defaultEntity) {
    this.defaultEntity = defaultEntity;
    return this;
  }

   /**
   * Get defaultEntity
   * @return defaultEntity
  **/
  @Schema(description = "")
  public Boolean isDefaultEntity() {
    return defaultEntity;
  }

  public void setDefaultEntity(Boolean defaultEntity) {
    this.defaultEntity = defaultEntity;
  }

  public DictionaryEntity preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

   /**
   * Get preferred
   * @return preferred
  **/
  @Schema(description = "")
  public Boolean isPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }

  public DictionaryEntity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(description = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public DictionaryEntity packedCompoundId(String packedCompoundId) {
    this.packedCompoundId = packedCompoundId;
    return this;
  }

   /**
   * Get packedCompoundId
   * @return packedCompoundId
  **/
  @Schema(description = "")
  public String getPackedCompoundId() {
    return packedCompoundId;
  }

  public void setPackedCompoundId(String packedCompoundId) {
    this.packedCompoundId = packedCompoundId;
  }

  public DictionaryEntity compoundId(String compoundId) {
    this.compoundId = compoundId;
    return this;
  }

   /**
   * Get compoundId
   * @return compoundId
  **/
  @Schema(description = "")
  public String getCompoundId() {
    return compoundId;
  }

  public void setCompoundId(String compoundId) {
    this.compoundId = compoundId;
  }

  public DictionaryEntity auditDisplayName(String auditDisplayName) {
    this.auditDisplayName = auditDisplayName;
    return this;
  }

   /**
   * Get auditDisplayName
   * @return auditDisplayName
  **/
  @Schema(description = "")
  public String getAuditDisplayName() {
    return auditDisplayName;
  }

  public void setAuditDisplayName(String auditDisplayName) {
    this.auditDisplayName = auditDisplayName;
  }

  public DictionaryEntity entityMarkedAsNotSupposedToBePersisted(Boolean entityMarkedAsNotSupposedToBePersisted) {
    this.entityMarkedAsNotSupposedToBePersisted = entityMarkedAsNotSupposedToBePersisted;
    return this;
  }

   /**
   * Get entityMarkedAsNotSupposedToBePersisted
   * @return entityMarkedAsNotSupposedToBePersisted
  **/
  @Schema(description = "")
  public Boolean isEntityMarkedAsNotSupposedToBePersisted() {
    return entityMarkedAsNotSupposedToBePersisted;
  }

  public void setEntityMarkedAsNotSupposedToBePersisted(Boolean entityMarkedAsNotSupposedToBePersisted) {
    this.entityMarkedAsNotSupposedToBePersisted = entityMarkedAsNotSupposedToBePersisted;
  }

  public DictionaryEntity classNameKey(String classNameKey) {
    this.classNameKey = classNameKey;
    return this;
  }

   /**
   * Get classNameKey
   * @return classNameKey
  **/
  @Schema(description = "")
  public String getClassNameKey() {
    return classNameKey;
  }

  public void setClassNameKey(String classNameKey) {
    this.classNameKey = classNameKey;
  }

  public DictionaryEntity internalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
    return this;
  }

   /**
   * Get internalDescription
   * @return internalDescription
  **/
  @Schema(description = "")
  public String getInternalDescription() {
    return internalDescription;
  }

  public void setInternalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
  }

  public DictionaryEntity andClearEventsQueue(EventsQueue andClearEventsQueue) {
    this.andClearEventsQueue = andClearEventsQueue;
    return this;
  }

   /**
   * Get andClearEventsQueue
   * @return andClearEventsQueue
  **/
  @Schema(description = "")
  public EventsQueue getAndClearEventsQueue() {
    return andClearEventsQueue;
  }

  public void setAndClearEventsQueue(EventsQueue andClearEventsQueue) {
    this.andClearEventsQueue = andClearEventsQueue;
  }

  public DictionaryEntity eventsQueueReadyToBeDispatched(Boolean eventsQueueReadyToBeDispatched) {
    this.eventsQueueReadyToBeDispatched = eventsQueueReadyToBeDispatched;
    return this;
  }

   /**
   * Get eventsQueueReadyToBeDispatched
   * @return eventsQueueReadyToBeDispatched
  **/
  @Schema(description = "")
  public Boolean isEventsQueueReadyToBeDispatched() {
    return eventsQueueReadyToBeDispatched;
  }

  public void setEventsQueueReadyToBeDispatched(Boolean eventsQueueReadyToBeDispatched) {
    this.eventsQueueReadyToBeDispatched = eventsQueueReadyToBeDispatched;
  }

  public DictionaryEntity identifier(Identifier identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @Schema(description = "")
  public Identifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Identifier identifier) {
    this.identifier = identifier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DictionaryEntity dictionaryEntity = (DictionaryEntity) o;
    return Objects.equals(this.id, dictionaryEntity.id) &&
        Objects.equals(this.version, dictionaryEntity.version) &&
        Objects.equals(this.lastModificationDate, dictionaryEntity.lastModificationDate) &&
        Objects.equals(this.auditPath, dictionaryEntity.auditPath) &&
        Objects.equals(this.classSimpleName, dictionaryEntity.classSimpleName) &&
        Objects.equals(this.active, dictionaryEntity.active) &&
        Objects.equals(this.name, dictionaryEntity.name) &&
        Objects.equals(this.preferedEntity, dictionaryEntity.preferedEntity) &&
        Objects.equals(this.defaultEntity, dictionaryEntity.defaultEntity) &&
        Objects.equals(this.preferred, dictionaryEntity.preferred) &&
        Objects.equals(this.displayName, dictionaryEntity.displayName) &&
        Objects.equals(this.packedCompoundId, dictionaryEntity.packedCompoundId) &&
        Objects.equals(this.compoundId, dictionaryEntity.compoundId) &&
        Objects.equals(this.auditDisplayName, dictionaryEntity.auditDisplayName) &&
        Objects.equals(this.entityMarkedAsNotSupposedToBePersisted, dictionaryEntity.entityMarkedAsNotSupposedToBePersisted) &&
        Objects.equals(this.classNameKey, dictionaryEntity.classNameKey) &&
        Objects.equals(this.internalDescription, dictionaryEntity.internalDescription) &&
        Objects.equals(this.andClearEventsQueue, dictionaryEntity.andClearEventsQueue) &&
        Objects.equals(this.eventsQueueReadyToBeDispatched, dictionaryEntity.eventsQueueReadyToBeDispatched) &&
        Objects.equals(this.identifier, dictionaryEntity.identifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, lastModificationDate, auditPath, classSimpleName, active, name, preferedEntity, defaultEntity, preferred, displayName, packedCompoundId, compoundId, auditDisplayName, entityMarkedAsNotSupposedToBePersisted, classNameKey, internalDescription, andClearEventsQueue, eventsQueueReadyToBeDispatched, identifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DictionaryEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    lastModificationDate: ").append(toIndentedString(lastModificationDate)).append("\n");
    sb.append("    auditPath: ").append(toIndentedString(auditPath)).append("\n");
    sb.append("    classSimpleName: ").append(toIndentedString(classSimpleName)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferedEntity: ").append(toIndentedString(preferedEntity)).append("\n");
    sb.append("    defaultEntity: ").append(toIndentedString(defaultEntity)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    packedCompoundId: ").append(toIndentedString(packedCompoundId)).append("\n");
    sb.append("    compoundId: ").append(toIndentedString(compoundId)).append("\n");
    sb.append("    auditDisplayName: ").append(toIndentedString(auditDisplayName)).append("\n");
    sb.append("    entityMarkedAsNotSupposedToBePersisted: ").append(toIndentedString(entityMarkedAsNotSupposedToBePersisted)).append("\n");
    sb.append("    classNameKey: ").append(toIndentedString(classNameKey)).append("\n");
    sb.append("    internalDescription: ").append(toIndentedString(internalDescription)).append("\n");
    sb.append("    andClearEventsQueue: ").append(toIndentedString(andClearEventsQueue)).append("\n");
    sb.append("    eventsQueueReadyToBeDispatched: ").append(toIndentedString(eventsQueueReadyToBeDispatched)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
