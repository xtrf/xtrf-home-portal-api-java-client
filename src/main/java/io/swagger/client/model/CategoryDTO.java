/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * group of things (ie. customers or projects) similar in some way (ie. VIP customers)
 */
@Schema(description = "group of things (ie. customers or projects) similar in some way (ie. VIP customers)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-07-02T16:14:58.802Z[GMT]")
public class CategoryDTO {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("preferred")
  private Boolean preferred = null;

  /**
   * set of types for which this category can be selected
   */
  @JsonAdapter(SupportedClassesEnum.Adapter.class)
  public enum SupportedClassesEnum {
    PROJECT("PROJECT"),
    QUOTE("QUOTE"),
    QUOTE_TASK("QUOTE_TASK"),
    TASK("TASK"),
    PROVIDER("PROVIDER"),
    CUSTOMER("CUSTOMER"),
    CUSTOMER_PERSON("CUSTOMER_PERSON"),
    PROVIDER_PERSON("PROVIDER_PERSON"),
    FINANCIAL_REPORT("FINANCIAL_REPORT"),
    REMINDER("REMINDER"),
    PROVIDER_INVOICE("PROVIDER_INVOICE"),
    CUSTOMER_INVOICE("CUSTOMER_INVOICE");

    private String value;

    SupportedClassesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SupportedClassesEnum fromValue(String text) {
      for (SupportedClassesEnum b : SupportedClassesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SupportedClassesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedClassesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedClassesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SupportedClassesEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("supportedClasses")
  private List<SupportedClassesEnum> supportedClasses = null;

  @SerializedName("default")
  private Boolean _default = null;

  public CategoryDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * internal identifier
   * @return id
  **/
  @Schema(description = "internal identifier")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public CategoryDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * localised name (formatted in the current user&#x27;s locale)
   * @return name
  **/
  @Schema(description = "localised name (formatted in the current user's locale)")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CategoryDTO active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * should this value be available on the XTRF selection lists
   * @return active
  **/
  @Schema(description = "should this value be available on the XTRF selection lists")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public CategoryDTO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

   /**
   * should this value be available on the top of XTRF selection lists, in the Preferred section
   * @return preferred
  **/
  @Schema(description = "should this value be available on the top of XTRF selection lists, in the Preferred section")
  public Boolean isPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }

  public CategoryDTO supportedClasses(List<SupportedClassesEnum> supportedClasses) {
    this.supportedClasses = supportedClasses;
    return this;
  }

  public CategoryDTO addSupportedClassesItem(SupportedClassesEnum supportedClassesItem) {
    if (this.supportedClasses == null) {
      this.supportedClasses = new ArrayList<SupportedClassesEnum>();
    }
    this.supportedClasses.add(supportedClassesItem);
    return this;
  }

   /**
   * set of types for which this category can be selected
   * @return supportedClasses
  **/
  @Schema(description = "set of types for which this category can be selected")
  public List<SupportedClassesEnum> getSupportedClasses() {
    return supportedClasses;
  }

  public void setSupportedClasses(List<SupportedClassesEnum> supportedClasses) {
    this.supportedClasses = supportedClasses;
  }

  public CategoryDTO _default(Boolean _default) {
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @Schema(description = "")
  public Boolean isDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryDTO categoryDTO = (CategoryDTO) o;
    return Objects.equals(this.id, categoryDTO.id) &&
        Objects.equals(this.name, categoryDTO.name) &&
        Objects.equals(this.active, categoryDTO.active) &&
        Objects.equals(this.preferred, categoryDTO.preferred) &&
        Objects.equals(this.supportedClasses, categoryDTO.supportedClasses) &&
        Objects.equals(this._default, categoryDTO._default);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, active, preferred, supportedClasses, _default);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    supportedClasses: ").append(toIndentedString(supportedClasses)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
