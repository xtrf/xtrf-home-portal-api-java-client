/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddressDTO;
import io.swagger.client.model.CompetenciesDTO;
import io.swagger.client.model.ContactDTO;
import io.swagger.client.model.CustomFieldsDTO;
import io.swagger.client.model.InvitationStatisticsDTO;
import io.swagger.client.model.PersonContactDTO;
import io.swagger.client.model.ProviderDTO;
import io.swagger.client.model.ProviderPersonDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VendorsApi
 */
@Ignore
public class VendorsApiTest {

    private final VendorsApi api = new VendorsApi();

    /**
     * Removes a person.
     *
     * Removes a person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete3Test() throws ApiException {
        Long personId = null;
        api.delete3(personId);

        // TODO: test validations
    }
    /**
     * Removes a provider price list.
     *
     * Removes a provider price list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete3_0Test() throws ApiException {
        Long priceListId = null;
        api.delete3_0(priceListId);

        // TODO: test validations
    }
    /**
     * Removes a provider.
     *
     * Removes a provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete4Test() throws ApiException {
        Long providerId = null;
        api.delete4(providerId);

        // TODO: test validations
    }
    /**
     * Returns address of a given provider.
     *
     * Returns address of a given provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAddress1Test() throws ApiException {
        Long providerId = null;
        AddressDTO response = api.getAddress1(providerId);

        // TODO: test validations
    }
    /**
     * Returns persons&#x27; internal identifiers.
     *
     * Returns persons&#x27; internal identifiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIds4Test() throws ApiException {
        Long updatedSince = null;
        List<Integer> response = api.getAllIds4(updatedSince);

        // TODO: test validations
    }
    /**
     * Returns providers&#x27; internal identifiers.
     *
     * Returns providers&#x27; internal identifiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIds5Test() throws ApiException {
        Long updatedSince = null;
        List<Integer> response = api.getAllIds5(updatedSince);

        // TODO: test validations
    }
    /**
     * Returns person details.
     *
     * Returns person details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getById4Test() throws ApiException {
        Long personId = null;
        ProviderPersonDTO response = api.getById4(personId);

        // TODO: test validations
    }
    /**
     * Returns provider details.
     *
     * Returns provider details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getById5Test() throws ApiException {
        Long providerId = null;
        String embed = null;
        ProviderDTO response = api.getById5(providerId, embed);

        // TODO: test validations
    }
    /**
     * Returns competencies of a given provider.
     *
     * Returns competencies of a given provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompetenciesTest() throws ApiException {
        Long providerId = null;
        CompetenciesDTO response = api.getCompetencies(providerId);

        // TODO: test validations
    }
    /**
     * Returns contact of a given person.
     *
     * Returns contact of a given person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContact2Test() throws ApiException {
        Long personId = null;
        PersonContactDTO response = api.getContact2(personId);

        // TODO: test validations
    }
    /**
     * Returns contact of a given provider.
     *
     * Returns contact of a given provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContact3Test() throws ApiException {
        Long providerId = null;
        ContactDTO response = api.getContact3(providerId);

        // TODO: test validations
    }
    /**
     * Returns correspondence address of a given provider.
     *
     * Returns correspondence address of a given provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorrespondenceAddress1Test() throws ApiException {
        Long providerId = null;
        AddressDTO response = api.getCorrespondenceAddress1(providerId);

        // TODO: test validations
    }
    /**
     * Returns custom fields of a given person.
     *
     * Returns custom fields of a given person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFields2Test() throws ApiException {
        Long personId = null;
        CustomFieldsDTO response = api.getCustomFields2(personId);

        // TODO: test validations
    }
    /**
     * Returns custom fields of a given provider.
     *
     * Returns custom fields of a given provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFields3Test() throws ApiException {
        Long providerId = null;
        CustomFieldsDTO response = api.getCustomFields3(providerId);

        // TODO: test validations
    }
    /**
     * Sends invitation to Vendor Portal.
     *
     * Sends invitation to Vendor Portal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendInvitationsTest() throws ApiException {
        Long personId = null;
        InvitationStatisticsDTO response = api.sendInvitations(personId);

        // TODO: test validations
    }
    /**
     * Sends invitations to Vendor Portal.
     *
     * Sends invitations to Vendor Portal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendInvitations1Test() throws ApiException {
        Long providerId = null;
        InvitationStatisticsDTO response = api.sendInvitations1(providerId);

        // TODO: test validations
    }
}
