/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BigDecimalDTO;
import io.swagger.client.model.CustomFieldsDTO;
import java.io.File;
import io.swagger.client.model.FileDto;
import io.swagger.client.model.FilesArchiveDto;
import io.swagger.client.model.FilesDto;
import io.swagger.client.model.FinanceDTO;
import io.swagger.client.model.JobDto;
import io.swagger.client.model.PayableCreateDTO;
import io.swagger.client.model.PayableDTO;
import io.swagger.client.model.ProjectFileDto;
import io.swagger.client.model.ProjectStatusDTO;
import io.swagger.client.model.QuoteCreateDTO;
import io.swagger.client.model.QuoteDTO;
import io.swagger.client.model.ReceivableCreateDTO;
import io.swagger.client.model.ReceivableDTO;
import io.swagger.client.model.SmartContactsDTO;
import io.swagger.client.model.SmartCustomFieldDTO;
import io.swagger.client.model.SourceLanguageDTO;
import io.swagger.client.model.SpecializationDTO;
import io.swagger.client.model.StringDTO;
import io.swagger.client.model.TargetLanguagesDTO;
import io.swagger.client.model.TimeDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotesSmartV2Api
 */
@Ignore
public class QuotesSmartV2ApiTest {

    private final QuotesSmartV2Api api = new QuotesSmartV2Api();

    /**
     * Adds files to the quote as added by PM.
     *
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFiles2Test() throws ApiException {
        TimeDTO body = null;
        String quoteId = null;
        api.addFiles2(body, quoteId);

        // TODO: test validations
    }
    /**
     * Prepares a ZIP archive that contains the specified files.
     *
     * Prepares a ZIP archive that contains the specified files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archive1Test() throws ApiException {
        FilesDto body = null;
        FilesArchiveDto response = api.archive1(body);

        // TODO: test validations
    }
    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     *
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeStatus2Test() throws ApiException {
        ProjectStatusDTO body = null;
        String quoteId = null;
        api.changeStatus2(body, quoteId);

        // TODO: test validations
    }
    /**
     * Creates a new Smart Quote.
     *
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void create3Test() throws ApiException {
        QuoteCreateDTO body = null;
        QuoteDTO response = api.create3(body);

        // TODO: test validations
    }
    /**
     * Adds a payable to a quote.
     *
     * Adds a payable to a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPayable1Test() throws ApiException {
        PayableCreateDTO body = null;
        String quote&#x27;sInternalIdentifier = null;
        PayableDTO response = api.createPayable1(body, quote&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Adds a receivable to a quote.
     *
     * Adds a receivable to a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReceivable1Test() throws ApiException {
        ReceivableCreateDTO body = null;
        String quote&#x27;sInternalIdentifier = null;
        ReceivableDTO response = api.createReceivable1(body, quote&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes a payable.
     *
     * Deletes a payable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePayableTest() throws ApiException {
        String quote&#x27;sInternalIdentifier = null;
        Long payable&#x27;sInternalIdentifier = null;
        api.deletePayable(quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes a receivable.
     *
     * Deletes a receivable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReceivableTest() throws ApiException {
        String quote&#x27;sInternalIdentifier = null;
        Long receivable&#x27;sInternalIdentifier = null;
        api.deleteReceivable(quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Returns quote details.
     *
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getById10Test() throws ApiException {
        String quoteId = null;
        QuoteDTO response = api.getById10(quoteId);

        // TODO: test validations
    }
    /**
     * Returns Client Contacts information for a quote.
     *
     * Returns Client Contacts information for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContacts3Test() throws ApiException {
        String quoteId = null;
        SmartContactsDTO response = api.getContacts3(quoteId);

        // TODO: test validations
    }
    /**
     * Returns a list of custom field keys and values for a project.
     *
     * Returns a list of custom field keys and values for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFields9Test() throws ApiException {
        String quoteId = null;
        CustomFieldsDTO response = api.getCustomFields9(quoteId);

        // TODO: test validations
    }
    /**
     * Returns details of a file.
     *
     * Returns details of a file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileById2Test() throws ApiException {
        String fileId = null;
        ProjectFileDto response = api.getFileById2(fileId);

        // TODO: test validations
    }
    /**
     * Downloads a file content.
     *
     * Downloads a file content.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileContentById1Test() throws ApiException {
        String fileId = null;
        String fileName = null;
        api.getFileContentById1(fileId, fileName);

        // TODO: test validations
    }
    /**
     * Returns list of files in a quote.
     *
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFiles1Test() throws ApiException {
        String quoteId = null;
        List<ProjectFileDto> response = api.getFiles1(quoteId);

        // TODO: test validations
    }
    /**
     * Returns finance information for a quote.
     *
     * Returns finance information for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFinance3Test() throws ApiException {
        String quoteId = null;
        FinanceDTO response = api.getFinance3(quoteId);

        // TODO: test validations
    }
    /**
     * Returns list of jobs in a quote.
     *
     * Returns list of jobs in a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobs1Test() throws ApiException {
        String quoteId = null;
        List<JobDto> response = api.getJobs1(quoteId);

        // TODO: test validations
    }
    /**
     * Updates Business Days for a quote.
     *
     * Updates Business Days for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBusinessDaysTest() throws ApiException {
        Integer body = null;
        String quoteId = null;
        api.updateBusinessDays(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates Client Notes for a quote.
     *
     * Updates Client Notes for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientNotes1Test() throws ApiException {
        StringDTO body = null;
        String quoteId = null;
        api.updateClientNotes1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates Client Reference Number for a quote.
     *
     * Updates Client Reference Number for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientReferenceNumber1Test() throws ApiException {
        StringDTO body = null;
        String quoteId = null;
        api.updateClientReferenceNumber1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates Client Contacts for a quote.
     *
     * Updates Client Contacts for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactsTest() throws ApiException {
        SmartContactsDTO body = null;
        String quoteId = null;
        SmartContactsDTO response = api.updateContacts(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates a custom field with a specified key in a quote.
     *
     * Updates a custom field with a specified key in a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomField1Test() throws ApiException {
        SmartCustomFieldDTO body = null;
        String quoteId = null;
        String key = null;
        api.updateCustomField1(body, quoteId, key);

        // TODO: test validations
    }
    /**
     * Updates Expected Delivery Date for a quote.
     *
     * Updates Expected Delivery Date for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExpectedDeliveryDateTest() throws ApiException {
        TimeDTO body = null;
        String quoteId = null;
        api.updateExpectedDeliveryDate(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates Internal Notes for a quote.
     *
     * Updates Internal Notes for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInternalNotes1Test() throws ApiException {
        StringDTO body = null;
        String quoteId = null;
        api.updateInternalNotes1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates a payable.
     *
     * Updates a payable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePayable1Test() throws ApiException {
        PayableDTO body = null;
        String quote&#x27;sInternalIdentifier = null;
        Long payable&#x27;sInternalIdentifier = null;
        PayableDTO response = api.updatePayable1(body, quote&#x27;sInternalIdentifier, payable&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Updates Quote Expiry Date for a quote.
     *
     * Updates Quote Expiry Date for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuoteExpiryTest() throws ApiException {
        TimeDTO body = null;
        String quoteId = null;
        api.updateQuoteExpiry(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates a receivable.
     *
     * Updates a receivable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReceivable1Test() throws ApiException {
        ReceivableDTO body = null;
        String quote&#x27;sInternalIdentifier = null;
        Long receivable&#x27;sInternalIdentifier = null;
        ReceivableDTO response = api.updateReceivable1(body, quote&#x27;sInternalIdentifier, receivable&#x27;sInternalIdentifier);

        // TODO: test validations
    }
    /**
     * Updates source language for a quote.
     *
     * Updates source language for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSourceLanguage1Test() throws ApiException {
        SourceLanguageDTO body = null;
        String quoteId = null;
        api.updateSourceLanguage1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates specialization for a quote.
     *
     * Updates specialization for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialization1Test() throws ApiException {
        SpecializationDTO body = null;
        String quoteId = null;
        api.updateSpecialization1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates target languages for a quote.
     *
     * Updates target languages for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetLanguages1Test() throws ApiException {
        TargetLanguagesDTO body = null;
        String quoteId = null;
        api.updateTargetLanguages1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     *
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVendorInstructions1Test() throws ApiException {
        StringDTO body = null;
        String quoteId = null;
        api.updateVendorInstructions1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Updates volume for a quote.
     *
     * Updates volume for a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVolume1Test() throws ApiException {
        BigDecimalDTO body = null;
        String quoteId = null;
        api.updateVolume1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Uploads file to the quote as a file uploaded by PM.
     *
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFile3Test() throws ApiException {
        File file = null;
        String fileName = null;
        String quoteId = null;
        FileDto response = api.uploadFile3(file, fileName, quoteId);

        // TODO: test validations
    }
}
