/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BigDecimalDTO;
import io.swagger.client.model.CATToolProjectDTO;
import io.swagger.client.model.CustomFieldsDTO;
import java.io.File;
import io.swagger.client.model.FileCategorizationsDto;
import io.swagger.client.model.FileDto;
import io.swagger.client.model.FileLinkCategorizationsDto;
import io.swagger.client.model.FilesArchiveDto;
import io.swagger.client.model.FilesDto;
import io.swagger.client.model.FinanceDTO;
import io.swagger.client.model.JobDto;
import io.swagger.client.model.PayableCreateDTO;
import io.swagger.client.model.PayableDTO;
import io.swagger.client.model.ProjectCreateDTO;
import io.swagger.client.model.ProjectDTO;
import io.swagger.client.model.ProjectFileDto;
import io.swagger.client.model.ProjectStatusDTO;
import io.swagger.client.model.ReceivableCreateDTO;
import io.swagger.client.model.ReceivableDTO;
import io.swagger.client.model.SmartContactsDTO;
import io.swagger.client.model.SmartCustomFieldDTO;
import io.swagger.client.model.SourceLanguageDTO;
import io.swagger.client.model.SpecializationDTO;
import io.swagger.client.model.StringDTO;
import io.swagger.client.model.TargetLanguagesDTO;
import io.swagger.client.model.TimeDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsSmartV2Api
 */
@Ignore
public class ProjectsSmartV2ApiTest {

    private final ProjectsSmartV2Api api = new ProjectsSmartV2Api();

    /**
     * Adds file links to the project as added by PM.
     *
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFileLinksTest() throws ApiException {
        FileLinkCategorizationsDto body = null;
        String projectId = null;
        FilesDto response = api.addFileLinks(body, projectId);

        // TODO: test validations
    }
    /**
     * Adds files to the project as added by PM.
     *
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \&quot;POST /v2/projects/{projectId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFiles1Test() throws ApiException {
        FileCategorizationsDto body = null;
        String projectId = null;
        api.addFiles1(body, projectId);

        // TODO: test validations
    }
    /**
     * Prepares a ZIP archive that contains the specified files.
     *
     * Prepares a ZIP archive that contains the specified files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveTest() throws ApiException {
        FilesDto body = null;
        FilesArchiveDto response = api.archive(body);

        // TODO: test validations
    }
    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     *
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, STARTED&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeStatus1Test() throws ApiException {
        ProjectStatusDTO body = null;
        String projectId = null;
        api.changeStatus1(body, projectId);

        // TODO: test validations
    }
    /**
     * Creates a new Smart Project.
     *
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void create2Test() throws ApiException {
        ProjectCreateDTO body = null;
        ProjectDTO response = api.create2(body);

        // TODO: test validations
    }
    /**
     * Adds a payable to a project.
     *
     * Adds a payable to a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPayableTest() throws ApiException {
        PayableCreateDTO body = null;
        String projectId = null;
        PayableDTO response = api.createPayable(body, projectId);

        // TODO: test validations
    }
    /**
     * Adds a receivable to a project.
     *
     * Adds a receivable to a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReceivableTest() throws ApiException {
        ReceivableCreateDTO body = null;
        String projectId = null;
        ReceivableDTO response = api.createReceivable(body, projectId);

        // TODO: test validations
    }
    /**
     * Deletes a payable.
     *
     * Deletes a payable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePayableTest() throws ApiException {
        String projectId = null;
        Long payableId = null;
        api.deletePayable(projectId, payableId);

        // TODO: test validations
    }
    /**
     * Deletes a receivable.
     *
     * Deletes a receivable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReceivableTest() throws ApiException {
        String projectId = null;
        Long receivableId = null;
        api.deleteReceivable(projectId, receivableId);

        // TODO: test validations
    }
    /**
     * Returns project details.
     *
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getById9Test() throws ApiException {
        String projectId = null;
        ProjectDTO response = api.getById9(projectId);

        // TODO: test validations
    }
    /**
     * Returns if cat tool project is created or queued.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCATToolProjectInfoTest() throws ApiException {
        String projectId = null;
        CATToolProjectDTO response = api.getCATToolProjectInfo(projectId);

        // TODO: test validations
    }
    /**
     * Returns Client Contacts information for a project.
     *
     * Returns Client Contacts information for a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContacts2Test() throws ApiException {
        String projectId = null;
        SmartContactsDTO response = api.getContacts2(projectId);

        // TODO: test validations
    }
    /**
     * Returns a list of custom field keys and values for a project.
     *
     * Returns a list of custom field keys and values for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFields8Test() throws ApiException {
        String projectId = null;
        CustomFieldsDTO response = api.getCustomFields8(projectId);

        // TODO: test validations
    }
    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     *
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:&lt;ul&gt;&lt;li&gt;the file was added to a job in the last step in the process&lt;/li&gt;&lt;li&gt;the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)&lt;/li&gt;&lt;li&gt;the job is finished (has Ready status)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeliverableFilesTest() throws ApiException {
        String projectId = null;
        List<ProjectFileDto> response = api.getDeliverableFiles(projectId);

        // TODO: test validations
    }
    /**
     * Returns details of a file.
     *
     * Returns details of a file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileById1Test() throws ApiException {
        String fileId = null;
        ProjectFileDto response = api.getFileById1(fileId);

        // TODO: test validations
    }
    /**
     * Downloads a file content.
     *
     * Downloads a file content.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileContentByIdTest() throws ApiException {
        String fileId = null;
        String fileName = null;
        api.getFileContentById(fileId, fileName);

        // TODO: test validations
    }
    /**
     * Returns list of files in a project.
     *
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesTest() throws ApiException {
        String projectId = null;
        List<ProjectFileDto> response = api.getFiles(projectId);

        // TODO: test validations
    }
    /**
     * Returns finance information for a project.
     *
     * Returns finance information for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFinance2Test() throws ApiException {
        String projectId = null;
        FinanceDTO response = api.getFinance2(projectId);

        // TODO: test validations
    }
    /**
     * Returns list of jobs in a project.
     *
     * Returns list of jobs in a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String projectId = null;
        List<JobDto> response = api.getJobs(projectId);

        // TODO: test validations
    }
    /**
     * Updates Client Deadline for a project.
     *
     * Updates Client Deadline for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientDeadlineTest() throws ApiException {
        TimeDTO body = null;
        String projectId = null;
        api.updateClientDeadline(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates Client Notes for a project.
     *
     * Updates Client Notes for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientNotesTest() throws ApiException {
        StringDTO body = null;
        String projectId = null;
        api.updateClientNotes(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates Client Reference Number for a project.
     *
     * Updates Client Reference Number for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientReferenceNumberTest() throws ApiException {
        StringDTO body = null;
        String projectId = null;
        api.updateClientReferenceNumber(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates Client Contacts for a project.
     *
     * Updates Client Contacts for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactsTest() throws ApiException {
        SmartContactsDTO body = null;
        String projectId = null;
        SmartContactsDTO response = api.updateContacts(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates a custom field with a specified key in a project
     *
     * Updates a custom field with a specified key in a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        SmartCustomFieldDTO body = null;
        String projectId = null;
        String key = null;
        api.updateCustomField(body, projectId, key);

        // TODO: test validations
    }
    /**
     * Updates Internal Notes for a project.
     *
     * Updates Internal Notes for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInternalNotesTest() throws ApiException {
        StringDTO body = null;
        String projectId = null;
        api.updateInternalNotes(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates Order Date for a project.
     *
     * Updates Order Date for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderedOnTest() throws ApiException {
        TimeDTO body = null;
        String projectId = null;
        api.updateOrderedOn(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates a payable.
     *
     * Updates a payable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePayableTest() throws ApiException {
        PayableDTO body = null;
        String projectId = null;
        Long payableId = null;
        PayableDTO response = api.updatePayable(body, projectId, payableId);

        // TODO: test validations
    }
    /**
     * Updates a receivable.
     *
     * Updates a receivable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReceivableTest() throws ApiException {
        ReceivableDTO body = null;
        String projectId = null;
        Long receivableId = null;
        ReceivableDTO response = api.updateReceivable(body, projectId, receivableId);

        // TODO: test validations
    }
    /**
     * Updates source language for a project.
     *
     * Updates source language for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSourceLanguageTest() throws ApiException {
        SourceLanguageDTO body = null;
        String projectId = null;
        api.updateSourceLanguage(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates specialization for a project.
     *
     * Updates specialization for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecializationTest() throws ApiException {
        SpecializationDTO body = null;
        String projectId = null;
        api.updateSpecialization(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates target languages for a project.
     *
     * Updates target languages for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetLanguagesTest() throws ApiException {
        TargetLanguagesDTO body = null;
        String projectId = null;
        api.updateTargetLanguages(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates instructions for all vendors performing the jobs in a project.
     *
     * Updates instructions for all vendors performing the jobs in a project. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVendorInstructionsTest() throws ApiException {
        StringDTO body = null;
        String projectId = null;
        api.updateVendorInstructions(body, projectId);

        // TODO: test validations
    }
    /**
     * Updates volume for a project.
     *
     * Updates volume for a project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateVolumeTest() throws ApiException {
        BigDecimalDTO body = null;
        String projectId = null;
        api.updateVolume(body, projectId);

        // TODO: test validations
    }
    /**
     * Uploads file to the project as a file uploaded by PM.
     *
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/projects/{projectId}/files/add\&quot; operation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFile2Test() throws ApiException {
        File file = null;
        String fileName = null;
        String projectId = null;
        FileDto response = api.uploadFile2(file, fileName, projectId);

        // TODO: test validations
    }
}
