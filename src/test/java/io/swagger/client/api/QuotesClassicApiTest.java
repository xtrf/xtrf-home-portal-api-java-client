/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CustomFieldDTO;
import io.swagger.client.model.CustomFieldsDTO;
import io.swagger.client.model.FinanceDTO;
import io.swagger.client.model.LanguageCombinationDTO;
import io.swagger.client.model.QuoteDTO;
import io.swagger.client.model.QuoteDatesDTO;
import io.swagger.client.model.TaskDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotesClassicApi
 */
@Ignore
public class QuotesClassicApiTest {

    private final QuotesClassicApi api = new QuotesClassicApi();

    /**
     * Creates a new language combination for a given quote without creating a task.
     *
     * Creates a new language combination for a given quote without creating a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLanguageCombination1Test() throws ApiException {
        LanguageCombinationDTO body = null;
        String quoteId = null;
        LanguageCombinationDTO response = api.createLanguageCombination1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Creates a new task for a given quote.
     *
     * Creates a new task for a given quote. Required fields are presented in the example.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTask1Test() throws ApiException {
        TaskDTO body = null;
        String quoteId = null;
        TaskDTO response = api.createTask1(body, quoteId);

        // TODO: test validations
    }
    /**
     * Removes a quote.
     *
     * Removes a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delete5Test() throws ApiException {
        String quoteId = null;
        api.delete5(quoteId);

        // TODO: test validations
    }
    /**
     * Returns quotes&#x27; internal identifiers.
     *
     * Returns quotes&#x27; internal identifiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIds7Test() throws ApiException {
        Long updatedSince = null;
        List<Integer> response = api.getAllIds7(updatedSince);

        // TODO: test validations
    }
    /**
     * Returns quote details.
     *
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getById8Test() throws ApiException {
        String quoteId = null;
        String embed = null;
        QuoteDTO response = api.getById8(quoteId, embed);

        // TODO: test validations
    }
    /**
     * Returns custom fields of a given quote.
     *
     * Returns custom fields of a given quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFields6Test() throws ApiException {
        String quoteId = null;
        CustomFieldsDTO response = api.getCustomFields6(quoteId);

        // TODO: test validations
    }
    /**
     * Returns dates of a given quote.
     *
     * Returns dates of a given quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDates2Test() throws ApiException {
        String quoteId = null;
        QuoteDatesDTO response = api.getDates2(quoteId);

        // TODO: test validations
    }
    /**
     * Returns finance of a given quote.
     *
     * Returns finance of a given quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFinance1Test() throws ApiException {
        String quoteId = null;
        FinanceDTO response = api.getFinance1(quoteId);

        // TODO: test validations
    }
    /**
     * Sends a quote for customer confirmation.
     *
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void send1Test() throws ApiException {
        String quoteId = null;
        api.send1(quoteId);

        // TODO: test validations
    }
    /**
     * Starts a quote.
     *
     * Starts a quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startTest() throws ApiException {
        String quoteId = null;
        api.start(quoteId);

        // TODO: test validations
    }
    /**
     * Updates custom fields of a given quote.
     *
     * Updates custom fields of a given quote.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldsTest() throws ApiException {
        List<CustomFieldDTO> body = null;
        String quoteId = null;
        CustomFieldsDTO response = api.updateCustomFields(body, quoteId);

        // TODO: test validations
    }
}
